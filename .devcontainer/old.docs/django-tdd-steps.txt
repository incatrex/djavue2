================================================================================
===   Steps to setup django-tdd
================================================================================

https://testdriven.io/courses/tdd-django/

================================================================================

1. Generate Project

django-admin.py startproject drf_project .
python manage.py startapp movies

2. Add the apps to the INSTALLED_APPS setting in the settings.py file
3. Next, define the custom User model in the movies/models.py file
4. Go ahead and create the migration file and apply all the migrations to the database:

# generate the migration
python manage.py makemigrations
# run the migration against databse
python manage.py migrate

5. Create a new superuser and run the Django development server:
incatrex
incatrex@gmail.com

6. Setup devcontainer to use docker-compose
https://github.com/microsoft/vscode-dev-containers/tree/main/containers/docker-from-docker-compose

7. Docker config
https://testdriven.io/courses/tdd-django/docker-config/

# NOTE: To run the docker container - don't use .devcontainer - go to folder in mac os terminal:
docker-compose build
docker-compose up -d
- view: http://localhost:8009/admin/
docker-compose down -v

8. Postgres setup
https://testdriven.io/courses/tdd-django/postgres-setup/
NOTE: had to add ncat install to Dockerfile (not in instructions)
ALSO: superuser incatrex doesn't seem to exist anymore

9. Pytest setup
https://testdriven.io/courses/tdd-django/pytest-setup/

10. Add Django REST framework
https://testdriven.io/courses/tdd-django/django-rest-framework/

11. Add RESTful routes
https://testdriven.io/courses/tdd-django/restful-routes/

TODO: ViewSets and Routers
Refactor the views into a single ViewSet on your own. If you want to take it a step further, try combining the ViewSet with a DRF Router component to automatically create the URL endpoints. Compare this to the more explicit views and URL endpoints that we set up. You can obviously move faster with ViewSets and Routers -- when your API endpoints map back to the model -- but you sacrifice readability since the logic is buried. This can make it more difficult to onboard a new developer onto your project.

12. Deployment
https://testdriven.io/courses/tdd-django/deployment/

used this to get docker working inside .devcontainer - so I can use heroku CLI along with docker CLI
https://github.com/microsoft/vscode-dev-containers/blob/main/script-library/docs/docker.md

heroku login
heroku container:login

export APP_NAME=boiling-earth-40353

heroku addons:create heroku-postgresql:hobby-dev --server $APP_NAME

# build image
cd server
docker build -f Dockerfile.prod -t registry.heroku.com/${APP_NAME}/web .

# run against remote DB
heroku config:get DATABASE_URL
export DATABASE_URL=postgres://byrmofzyhxgzla:e557236868c2c1ee932eb7fc3713b34115add9aa3599dc12bbe4772465b896ae@ec2-18-214-195-34.compute-1.amazonaws.com:5432/da3eg09v92ucb9

docker run --name django-tdd -e "PORT=8765" -p 8008:8765 registry.heroku.com/${APP_NAME}/web

# rebuild 
docker build -f Dockerfile.prod -t registry.heroku.com/${APP_NAME}/web .

# Push the image to the registry:
docker push registry.heroku.com/${APP_NAME}/web:latest

# release the image
heroku container:release web --server $APP_NAME

# apply database migrations
heroku run python manage.py migrate --server $APP_NAME

# seed the database
heroku run python manage.py loaddata movies.json --server $APP_NAME

# view all movies
http --json https://$APP_NAME.herokuapp.com/api/movies/

# add a movie
http --json POST https://$APP_NAME.herokuapp.com/api/movies/ title="Barton Fink" genre=thriller year=1991

13.  Deployment - whitenoise - static files

# to run locally now need to execute collectstatic
docker-compose exec movies python manage.py collectstatic --noinput

# create superuser:
heroku run python manage.py createsuperuser --server $APP_NAME

14. Code Coverage
https://testdriven.io/courses/tdd-django/code-coverage-and-quality/

# Use override to run docker-compose in devcontainer
docker-compose -f docker-compose.yml -f .devcontainer/docker-compose.yml up -d

docker-compose exec movies pytest -p no:warnings --cov=.

15. Code Quality

# Run Flake8 (Linting)
docker-compose exec movies flake8 .

# Run Black (formating)
docker-compose -f docker-compose.yml -f .devcontainer/docker-compose.yml up -d --build
docker-compose exec movies black --check --exclude=migrations .
docker-compose exec movies black --diff --exclude=migrations .
docker-compose exec movies black --exclude=migrations .

# Run Isort (sorting imports)
docker-compose -f docker-compose.yml -f .devcontainer/docker-compose.yml up -d --build
docker-compose exec movies isort . --check-only
docker-compose exec movies isort . --diff
docker-compose exec movies isort .


# Local setup of database:superuser/load data:
docker-compose exec movies python manage.py createsuperuser
docker-compose exec movies python manage.py loaddata movies.json


http://localhost:8009/admin/login/?next=/admin/

16. Continuous Integration - GitLab
https://testdriven.io/courses/tdd-django/continuous-integration/

(had to rename Dockerfile.prd to Dockerfile.prod)


17. Continuous Delivery
https://testdriven.io/courses/tdd-django/continuous-delivery/


18. Remaining Routes
https://testdriven.io/courses/tdd-django/remaining-routes/

19. Pytest Monkeypatching
https://testdriven.io/courses/tdd-django/pytest-monkeypatching/

#Add Movie
#Get Movie
#Remove Movie

docker-compose exec movies flake8 .
docker-compose exec movies black --exclude=migrations .
docker-compose exec movies isort .

#Run Tests in Parallel
docker-compose exec movies pytest -p no:warnings -k "unit" -n auto


20. Advanced CI
https://testdriven.io/courses/tdd-django/advanced-ci/

#Multistage Docker Build


#Update Requirements
docker-compose down -v

docker-compose -f docker-compose.yml -f .devcontainer/docker-compose.yml up -d --build
docker-compose exec movies pytest -p no:warnings --cov=.
docker-compose exec movies flake8 .
docker-compose exec movies black --exclude=migrations .
docker-compose exec movies isort .

# Fix Django Deployment Checklist


# Move SECRET_KEY to environment variable

# Validate the SECRET_KEY:
heroku run sh --server $APP_NAME
$ python manage.py shell
>>> from django.conf import settings
>>> settings.SECRET_KEY


21. API Documentation
https://testdriven.io/courses/tdd-django/api-documentation/

#Swagger
http://localhost:8009/swagger-docs/

#Core API
http://localhost:8009/docs/.
